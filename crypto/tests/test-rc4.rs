use crypto::rc4;
use stream_cipher::generic_array::typenum::U24;
use stream_cipher::generic_array::typenum::U32;
use stream_cipher::generic_array::typenum::U5;
use stream_cipher::generic_array::typenum::U8;
use stream_cipher::generic_array::GenericArray;
use stream_cipher::NewStreamCipher;
use stream_cipher::StreamCipher;

/* RC4 test vectors taken from RFC: https://tools.ietf.org/html/rfc6229
 */

/* Key length: 40 bits
 * Key: 0x0102030405
 */

const KEY_N1: [u8; 5] = [0x01, 0x02, 0x03, 0x04, 0x05];

const TEST_N1_0: [u8; 32] = [
    0xb2, 0x39, 0x63, 0x05, 0xf0, 0x3d, 0xc0, 0x27, 0xcc, 0xc3, 0x52, 0x4a, 0x0a, 0x11, 0x18, 0xa8,
    0x69, 0x82, 0x94, 0x4f, 0x18, 0xfc, 0x82, 0xd5, 0x89, 0xc4, 0x03, 0xa4, 0x7a, 0x0d, 0x09, 0x19,
];

const TEST_N1_240: [u8; 32] = [
    0x28, 0xcb, 0x11, 0x32, 0xc9, 0x6c, 0xe2, 0x86, 0x42, 0x1d, 0xca, 0xad, 0xb8, 0xb6, 0x9e, 0xae,
    0x1c, 0xfc, 0xf6, 0x2b, 0x03, 0xed, 0xdb, 0x64, 0x1d, 0x77, 0xdf, 0xcf, 0x7f, 0x8d, 0x8c, 0x93,
];

const TEST_N1_496: [u8; 32] = [
    0x42, 0xb7, 0xd0, 0xcd, 0xd9, 0x18, 0xa8, 0xa3, 0x3d, 0xd5, 0x17, 0x81, 0xc8, 0x1f, 0x40, 0x41,
    0x64, 0x59, 0x84, 0x44, 0x32, 0xa7, 0xda, 0x92, 0x3c, 0xfb, 0x3e, 0xb4, 0x98, 0x06, 0x61, 0xf6,
];

const TEST_N1_752: [u8; 32] = [
    0xec, 0x10, 0x32, 0x7b, 0xde, 0x2b, 0xee, 0xfd, 0x18, 0xf9, 0x27, 0x76, 0x80, 0x45, 0x7e, 0x22,
    0xeb, 0x62, 0x63, 0x8d, 0x4f, 0x0b, 0xa1, 0xfe, 0x9f, 0xca, 0x20, 0xe0, 0x5b, 0xf8, 0xff, 0x2b,
];

const TEST_N1_1008: [u8; 32] = [
    0x45, 0x12, 0x90, 0x48, 0xe6, 0xa0, 0xed, 0x0b, 0x56, 0xb4, 0x90, 0x33, 0x8f, 0x07, 0x8d, 0xa5,
    0x30, 0xab, 0xbc, 0xc7, 0xc2, 0x0b, 0x01, 0x60, 0x9f, 0x23, 0xee, 0x2d, 0x5f, 0x6b, 0xb7, 0xdf,
];

const TEST_N1_1520: [u8; 32] = [
    0x32, 0x94, 0xf7, 0x44, 0xd8, 0xf9, 0x79, 0x05, 0x07, 0xe7, 0x0f, 0x62, 0xe5, 0xbb, 0xce, 0xea,
    0xd8, 0x72, 0x9d, 0xb4, 0x18, 0x82, 0x25, 0x9b, 0xee, 0x4f, 0x82, 0x53, 0x25, 0xf5, 0xa1, 0x30,
];

const TEST_N1_2032: [u8; 32] = [
    0x1e, 0xb1, 0x4a, 0x0c, 0x13, 0xb3, 0xbf, 0x47, 0xfa, 0x2a, 0x0b, 0xa9, 0x3a, 0xd4, 0x5b, 0x8b,
    0xcc, 0x58, 0x2f, 0x8b, 0xa9, 0xf2, 0x65, 0xe2, 0xb1, 0xbe, 0x91, 0x12, 0xe9, 0x75, 0xd2, 0xd7,
];

const TEST_N1_3056: [u8; 32] = [
    0xf2, 0xe3, 0x0f, 0x9b, 0xd1, 0x02, 0xec, 0xbf, 0x75, 0xaa, 0xad, 0xe9, 0xbc, 0x35, 0xc4, 0x3c,
    0xec, 0x0e, 0x11, 0xc4, 0x79, 0xdc, 0x32, 0x9d, 0xc8, 0xda, 0x79, 0x68, 0xfe, 0x96, 0x56, 0x81,
];

const TEST_N1_4080: [u8; 32] = [
    0x06, 0x83, 0x26, 0xa2, 0x11, 0x84, 0x16, 0xd2, 0x1f, 0x9d, 0x04, 0xb2, 0xcd, 0x1c, 0xa0, 0x50,
    0xff, 0x25, 0xb5, 0x89, 0x95, 0x99, 0x67, 0x07, 0xe5, 0x1f, 0xbd, 0xf0, 0x8b, 0x34, 0xd8, 0x75,
];

#[test]
fn f_test_rc4_key1() {
    let mut rc4 = rc4::RC4::<U5>::new(
        &GenericArray::from_slice(&KEY_N1),
        &GenericArray::from_slice(&[]),
    );
    let mut buf1: [u8; 4112] = [0x0; 4112];
    let buf2: [u8; 4112] = [0x0; 4112];

    rc4.encrypt(&mut buf1);
    assert_eq!(buf1[0..32], TEST_N1_0);
    assert_eq!(buf1[240..272], TEST_N1_240);
    assert_eq!(buf1[496..528], TEST_N1_496);
    assert_eq!(buf1[752..784], TEST_N1_752);
    assert_eq!(buf1[1008..1040], TEST_N1_1008);
    assert_eq!(buf1[1520..1552], TEST_N1_1520);
    assert_eq!(buf1[2032..2064], TEST_N1_2032);
    assert_eq!(buf1[3056..3088], TEST_N1_3056);
    assert_eq!(buf1[4080..4112], TEST_N1_4080);

    rc4.decrypt(&mut buf1);
    for i in 0..buf1.len() {
        assert_eq!(buf1[i], buf2[i]);
    }
}

/* Key length: 256 bits
 * Key: 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20
 */

const KEY_N2: [u8; 32] = [
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
];

const TEST_N2_0: [u8; 32] = [
    0xea, 0xa6, 0xbd, 0x25, 0x88, 0x0b, 0xf9, 0x3d, 0x3f, 0x5d, 0x1e, 0x4c, 0xa2, 0x61, 0x1d, 0x91,
    0xcf, 0xa4, 0x5c, 0x9f, 0x7e, 0x71, 0x4b, 0x54, 0xbd, 0xfa, 0x80, 0x02, 0x7c, 0xb1, 0x43, 0x80,
];

const TEST_N2_240: [u8; 32] = [
    0x11, 0x4a, 0xe3, 0x44, 0xde, 0xd7, 0x1b, 0x35, 0xf2, 0xe6, 0x0f, 0xeb, 0xad, 0x72, 0x7f, 0xd8,
    0x02, 0xe1, 0xe7, 0x05, 0x6b, 0x0f, 0x62, 0x39, 0x00, 0x49, 0x64, 0x22, 0x94, 0x3e, 0x97, 0xb6,
];

const TEST_N2_496: [u8; 32] = [
    0x91, 0xcb, 0x93, 0xc7, 0x87, 0x96, 0x4e, 0x10, 0xd9, 0x52, 0x7d, 0x99, 0x9c, 0x6f, 0x93, 0x6b,
    0x49, 0xb1, 0x8b, 0x42, 0xf8, 0xe8, 0x36, 0x7c, 0xbe, 0xb5, 0xef, 0x10, 0x4b, 0xa1, 0xc7, 0xcd,
];

const TEST_N2_752: [u8; 32] = [
    0x87, 0x08, 0x4b, 0x3b, 0xa7, 0x00, 0xba, 0xde, 0x95, 0x56, 0x10, 0x67, 0x27, 0x45, 0xb3, 0x74,
    0xe7, 0xa7, 0xb9, 0xe9, 0xec, 0x54, 0x0d, 0x5f, 0xf4, 0x3b, 0xdb, 0x12, 0x79, 0x2d, 0x1b, 0x35,
];

const TEST_N2_1008: [u8; 32] = [
    0xc7, 0x99, 0xb5, 0x96, 0x73, 0x8f, 0x6b, 0x01, 0x8c, 0x76, 0xc7, 0x4b, 0x17, 0x59, 0xbd, 0x90,
    0x7f, 0xec, 0x5b, 0xfd, 0x9f, 0x9b, 0x89, 0xce, 0x65, 0x48, 0x30, 0x90, 0x92, 0xd7, 0xe9, 0x58,
];

const TEST_N2_1520: [u8; 32] = [
    0x40, 0xf2, 0x50, 0xb2, 0x6d, 0x1f, 0x09, 0x6a, 0x4a, 0xfd, 0x4c, 0x34, 0x0a, 0x58, 0x88, 0x15,
    0x3e, 0x34, 0x13, 0x5c, 0x79, 0xdb, 0x01, 0x02, 0x00, 0x76, 0x76, 0x51, 0xcf, 0x26, 0x30, 0x73,
];

const TEST_N2_2032: [u8; 32] = [
    0xf6, 0x56, 0xab, 0xcc, 0xf8, 0x8d, 0xd8, 0x27, 0x02, 0x7b, 0x2c, 0xe9, 0x17, 0xd4, 0x64, 0xec,
    0x18, 0xb6, 0x25, 0x03, 0xbf, 0xbc, 0x07, 0x7f, 0xba, 0xbb, 0x98, 0xf2, 0x0d, 0x98, 0xab, 0x34,
];

const TEST_N2_3056: [u8; 32] = [
    0x8a, 0xed, 0x95, 0xee, 0x5b, 0x0d, 0xcb, 0xfb, 0xef, 0x4e, 0xb2, 0x1d, 0x3a, 0x3f, 0x52, 0xf9,
    0x62, 0x5a, 0x1a, 0xb0, 0x0e, 0xe3, 0x9a, 0x53, 0x27, 0x34, 0x6b, 0xdd, 0xb0, 0x1a, 0x9c, 0x18,
];

const TEST_N2_4080: [u8; 32] = [
    0xa1, 0x3a, 0x7c, 0x79, 0xc7, 0xe1, 0x19, 0xb5, 0xab, 0x02, 0x96, 0xab, 0x28, 0xc3, 0x00, 0xb9,
    0xf3, 0xe4, 0xc0, 0xa2, 0xe0, 0x2d, 0x1d, 0x01, 0xf7, 0xf0, 0xa7, 0x46, 0x18, 0xaf, 0x2b, 0x48,
];

#[test]
fn f_test_rc4_key2() {
    let mut rc4 = rc4::RC4::<U32>::new(
        &GenericArray::from_slice(&KEY_N2),
        &GenericArray::from_slice(&[]),
    );
    let mut buf1: [u8; 4112] = [0x0; 4112];
    let buf2: [u8; 4112] = [0x0; 4112];

    rc4.encrypt(&mut buf1);
    assert_eq!(buf1[0..32], TEST_N2_0);
    assert_eq!(buf1[240..272], TEST_N2_240);
    assert_eq!(buf1[496..528], TEST_N2_496);
    assert_eq!(buf1[752..784], TEST_N2_752);
    assert_eq!(buf1[1008..1040], TEST_N2_1008);
    assert_eq!(buf1[1520..1552], TEST_N2_1520);
    assert_eq!(buf1[2032..2064], TEST_N2_2032);
    assert_eq!(buf1[3056..3088], TEST_N2_3056);
    assert_eq!(buf1[4080..4112], TEST_N2_4080);

    rc4.decrypt(&mut buf1);
    for i in 0..buf1.len() {
        assert_eq!(buf1[i], buf2[i]);
    }
}

/* Key length: 64 bits.
 * Key: 0x641910833222772a
 */

const KEY_N3: [u8; 8] = [0x64, 0x19, 0x10, 0x83, 0x32, 0x22, 0x77, 0x2a];

const TEST_N3_0: [u8; 32] = [
    0xbb, 0xf6, 0x09, 0xde, 0x94, 0x13, 0x17, 0x2d, 0x07, 0x66, 0x0c, 0xb6, 0x80, 0x71, 0x69, 0x26,
    0x46, 0x10, 0x1a, 0x6d, 0xab, 0x43, 0x11, 0x5d, 0x6c, 0x52, 0x2b, 0x4f, 0xe9, 0x36, 0x04, 0xa9,
];

const TEST_N3_240: [u8; 32] = [
    0xcb, 0xe1, 0xff, 0xf2, 0x1c, 0x96, 0xf3, 0xee, 0xf6, 0x1e, 0x8f, 0xe0, 0x54, 0x2c, 0xbd, 0xf0,
    0x34, 0x79, 0x38, 0xbf, 0xfa, 0x40, 0x09, 0xc5, 0x12, 0xcf, 0xb4, 0x03, 0x4b, 0x0d, 0xd1, 0xa7,
];

const TEST_N3_496: [u8; 32] = [
    0x78, 0x67, 0xa7, 0x86, 0xd0, 0x0a, 0x71, 0x47, 0x90, 0x4d, 0x76, 0xdd, 0xf1, 0xe5, 0x20, 0xe3,
    0x8d, 0x3e, 0x9e, 0x1c, 0xae, 0xfc, 0xcc, 0xb3, 0xfb, 0xf8, 0xd1, 0x8f, 0x64, 0x12, 0x0b, 0x32,
];

const TEST_N3_752: [u8; 32] = [
    0x94, 0x23, 0x37, 0xf8, 0xfd, 0x76, 0xf0, 0xfa, 0xe8, 0xc5, 0x2d, 0x79, 0x54, 0x81, 0x06, 0x72,
    0xb8, 0x54, 0x8c, 0x10, 0xf5, 0x16, 0x67, 0xf6, 0xe6, 0x0e, 0x18, 0x2f, 0xa1, 0x9b, 0x30, 0xf7,
];

const TEST_N3_1008: [u8; 32] = [
    0x02, 0x11, 0xc7, 0xc6, 0x19, 0x0c, 0x9e, 0xfd, 0x12, 0x37, 0xc3, 0x4c, 0x8f, 0x2e, 0x06, 0xc4,
    0xbd, 0xa6, 0x4f, 0x65, 0x27, 0x6d, 0x2a, 0xac, 0xb8, 0xf9, 0x02, 0x12, 0x20, 0x3a, 0x80, 0x8e,
];

const TEST_N3_1520: [u8; 32] = [
    0xbd, 0x38, 0x20, 0xf7, 0x32, 0xff, 0xb5, 0x3e, 0xc1, 0x93, 0xe7, 0x9d, 0x33, 0xe2, 0x7c, 0x73,
    0xd0, 0x16, 0x86, 0x16, 0x86, 0x19, 0x07, 0xd4, 0x82, 0xe3, 0x6c, 0xda, 0xc8, 0xcf, 0x57, 0x49,
];

const TEST_N3_2032: [u8; 32] = [
    0x97, 0xb0, 0xf0, 0xf2, 0x24, 0xb2, 0xd2, 0x31, 0x71, 0x14, 0x80, 0x8f, 0xb0, 0x3a, 0xf7, 0xa0,
    0xe5, 0x96, 0x16, 0xe4, 0x69, 0x78, 0x79, 0x39, 0xa0, 0x63, 0xce, 0xea, 0x9a, 0xf9, 0x56, 0xd1,
];

const TEST_N3_3056: [u8; 32] = [
    0xc4, 0x7e, 0x0d, 0xc1, 0x66, 0x09, 0x19, 0xc1, 0x11, 0x01, 0x20, 0x8f, 0x9e, 0x69, 0xaa, 0x1f,
    0x5a, 0xe4, 0xf1, 0x28, 0x96, 0xb8, 0x37, 0x9a, 0x2a, 0xad, 0x89, 0xb5, 0xb5, 0x53, 0xd6, 0xb0,
];

const TEST_N3_4080: [u8; 32] = [
    0x6b, 0x6b, 0x09, 0x8d, 0x0c, 0x29, 0x3b, 0xc2, 0x99, 0x3d, 0x80, 0xbf, 0x05, 0x18, 0xb6, 0xd9,
    0x81, 0x70, 0xcc, 0x3c, 0xcd, 0x92, 0xa6, 0x98, 0x62, 0x1b, 0x93, 0x9d, 0xd3, 0x8f, 0xe7, 0xb9,
];

#[test]
fn f_test_rc4_key3() {
    let mut rc4 = rc4::RC4::<U8>::new(
        &GenericArray::from_slice(&KEY_N3),
        &GenericArray::from_slice(&[]),
    );
    let mut buf1: [u8; 4112] = [0x0; 4112];
    let buf2: [u8; 4112] = [0x0; 4112];

    rc4.encrypt(&mut buf1);
    assert_eq!(buf1[0..32], TEST_N3_0);
    assert_eq!(buf1[240..272], TEST_N3_240);
    assert_eq!(buf1[496..528], TEST_N3_496);
    assert_eq!(buf1[752..784], TEST_N3_752);
    assert_eq!(buf1[1008..1040], TEST_N3_1008);
    assert_eq!(buf1[1520..1552], TEST_N3_1520);
    assert_eq!(buf1[2032..2064], TEST_N3_2032);
    assert_eq!(buf1[3056..3088], TEST_N3_3056);
    assert_eq!(buf1[4080..4112], TEST_N3_4080);

    rc4.decrypt(&mut buf1);
    for i in 0..buf1.len() {
        assert_eq!(buf1[i], buf2[i]);
    }
}

/* Key length: 192 bits
 * Key: 0xc109163908ebe51debb46227c6cc8b37641910833222772a
 */

const KEY_N4: [u8; 24] = [
    0xc1, 0x09, 0x16, 0x39, 0x08, 0xeb, 0xe5, 0x1d, 0xeb, 0xb4, 0x62, 0x27, 0xc6, 0xcc, 0x8b, 0x37,
    0x64, 0x19, 0x10, 0x83, 0x32, 0x22, 0x77, 0x2a,
];

const TEST_N4_0: [u8; 32] = [
    0x54, 0xb6, 0x4e, 0x6b, 0x5a, 0x20, 0xb5, 0xe2, 0xec, 0x84, 0x59, 0x3d, 0xc7, 0x98, 0x9d, 0xa7,
    0xc1, 0x35, 0xee, 0xe2, 0x37, 0xa8, 0x54, 0x65, 0xff, 0x97, 0xdc, 0x03, 0x92, 0x4f, 0x45, 0xce,
];

const TEST_N4_240: [u8; 32] = [
    0xcf, 0xcc, 0x92, 0x2f, 0xb4, 0xa1, 0x4a, 0xb4, 0x5d, 0x61, 0x75, 0xaa, 0xbb, 0xf2, 0xd2, 0x01,
    0x83, 0x7b, 0x87, 0xe2, 0xa4, 0x46, 0xad, 0x0e, 0xf7, 0x98, 0xac, 0xd0, 0x2b, 0x94, 0x12, 0x4f,
];

const TEST_N4_496: [u8; 32] = [
    0x17, 0xa6, 0xdb, 0xd6, 0x64, 0x92, 0x6a, 0x06, 0x36, 0xb3, 0xf4, 0xc3, 0x7a, 0x4f, 0x46, 0x94,
    0x4a, 0x5f, 0x9f, 0x26, 0xae, 0xee, 0xd4, 0xd4, 0xa2, 0x5f, 0x63, 0x2d, 0x30, 0x52, 0x33, 0xd9,
];

const TEST_N4_752: [u8; 32] = [
    0x80, 0xa3, 0xd0, 0x1e, 0xf0, 0x0c, 0x8e, 0x9a, 0x42, 0x09, 0xc1, 0x7f, 0x4e, 0xeb, 0x35, 0x8c,
    0xd1, 0x5e, 0x7d, 0x5f, 0xfa, 0xaa, 0xbc, 0x02, 0x07, 0xbf, 0x20, 0x0a, 0x11, 0x77, 0x93, 0xa2,
];

const TEST_N4_1008: [u8; 32] = [
    0x34, 0x96, 0x82, 0xbf, 0x58, 0x8e, 0xaa, 0x52, 0xd0, 0xaa, 0x15, 0x60, 0x34, 0x6a, 0xea, 0xfa,
    0xf5, 0x85, 0x4c, 0xdb, 0x76, 0xc8, 0x89, 0xe3, 0xad, 0x63, 0x35, 0x4e, 0x5f, 0x72, 0x75, 0xe3,
];

const TEST_N4_1520: [u8; 32] = [
    0x53, 0x2c, 0x7c, 0xec, 0xcb, 0x39, 0xdf, 0x32, 0x36, 0x31, 0x84, 0x05, 0xa4, 0xb1, 0x27, 0x9c,
    0xba, 0xef, 0xe6, 0xd9, 0xce, 0xb6, 0x51, 0x84, 0x22, 0x60, 0xe0, 0xd1, 0xe0, 0x5e, 0x3b, 0x90,
];

const TEST_N4_2032: [u8; 32] = [
    0xe8, 0x2d, 0x8c, 0x6d, 0xb5, 0x4e, 0x3c, 0x63, 0x3f, 0x58, 0x1c, 0x95, 0x2b, 0xa0, 0x42, 0x07,
    0x4b, 0x16, 0xe5, 0x0a, 0xbd, 0x38, 0x1b, 0xd7, 0x09, 0x00, 0xa9, 0xcd, 0x9a, 0x62, 0xcb, 0x23,
];

const TEST_N4_3056: [u8; 32] = [
    0x36, 0x82, 0xee, 0x33, 0xbd, 0x14, 0x8b, 0xd9, 0xf5, 0x86, 0x56, 0xcd, 0x8f, 0x30, 0xd9, 0xfb,
    0x1e, 0x5a, 0x0b, 0x84, 0x75, 0x04, 0x5d, 0x9b, 0x20, 0xb2, 0x62, 0x86, 0x24, 0xed, 0xfd, 0x9e,
];

const TEST_N4_4080: [u8; 32] = [
    0x63, 0xed, 0xd6, 0x84, 0xfb, 0x82, 0x62, 0x82, 0xfe, 0x52, 0x8f, 0x9c, 0x0e, 0x92, 0x37, 0xbc,
    0xe4, 0xdd, 0x2e, 0x98, 0xd6, 0x96, 0x0f, 0xae, 0x0b, 0x43, 0x54, 0x54, 0x56, 0x74, 0x33, 0x91,
];

#[test]
fn f_test_rc4_key4() {
    let mut rc4 = rc4::RC4::<U24>::new(
        &GenericArray::from_slice(&KEY_N4),
        &GenericArray::from_slice(&[]),
    );
    let mut buf1: [u8; 4112] = [0x0; 4112];
    let buf2: [u8; 4112] = [0x0; 4112];

    rc4.encrypt(&mut buf1);
    assert_eq!(buf1[0..32], TEST_N4_0);
    assert_eq!(buf1[240..272], TEST_N4_240);
    assert_eq!(buf1[496..528], TEST_N4_496);
    assert_eq!(buf1[752..784], TEST_N4_752);
    assert_eq!(buf1[1008..1040], TEST_N4_1008);
    assert_eq!(buf1[1520..1552], TEST_N4_1520);
    assert_eq!(buf1[2032..2064], TEST_N4_2032);
    assert_eq!(buf1[3056..3088], TEST_N4_3056);
    assert_eq!(buf1[4080..4112], TEST_N4_4080);

    rc4.decrypt(&mut buf1);
    for i in 0..buf1.len() {
        assert_eq!(buf1[i], buf2[i]);
    }
}
